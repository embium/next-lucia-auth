generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id             String    @id @db.VarChar(21)
  email          String    @unique(map: "users_email_unique") @db.VarChar(255)
  emailVerified  Boolean   @default(false)
  hashedPassword String?   @db.VarChar(255)
  avatar         String?   @db.VarChar(255)
  createdAt      DateTime  @default(dbgenerated("(now())")) @db.Timestamp(0)
  updatedAt      DateTime? @db.Timestamp(0)

  role UserRole @default(USER)

  sessions               Session[]
  posts                  Post[]
  passwordResetToken     passwordResetToken?
  emailVerificationToken emailVerificationCode?

  @@index([email], map: "email_idx")
}

model Session {
  id        String   @id @db.VarChar(255)
  userId    String   @db.VarChar(21)
  expiresAt DateTime @db.DateTime(0)

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId], map: "user_idx")
}

model Post {
  id        String    @id @db.VarChar(15)
  userId    String    @db.VarChar(255)
  title     String    @db.VarChar(255)
  excerpt   String    @db.VarChar(255)
  content   String    @db.Text
  status    String    @default("draft") @db.VarChar(10)
  tags      String?   @db.VarChar(255)
  createdAt DateTime  @default(dbgenerated("(now())")) @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([createdAt], map: "post_created_at_idx")
  @@index([userId], map: "user_idx")
}

model emailVerificationCode {
  id        Int      @id @default(autoincrement())
  userId    String   @unique(map: "email_verification_codes_user_id_unique") @db.VarChar(21)
  email     String   @db.VarChar(255)
  code      String   @db.VarChar(8)
  expiresAt DateTime @db.DateTime(0)

  user User @relation(fields: [userId], references: [id])

  @@index([email], map: "email_idx")
  @@index([userId], map: "user_idx")
}

model passwordResetToken {
  id        String   @id @db.VarChar(40)
  userId    String   @unique @db.VarChar(21)
  expiresAt DateTime @db.DateTime(0)

  user User @relation(fields: [userId], references: [id])

  @@index([userId], map: "user_idx")
}
